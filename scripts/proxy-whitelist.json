{
  "FIND_SPACES": "query spaces($query: String!, $offset: Int!, $limit: Int!) { cp_space(where: {_or: [{schema_description: {_ilike: $query}}, {schema_maintainer: {schema_name: {_ilike: $query}}}]}, offset: $offset, limit: $limit) { id schema_image schema_color schema_audience_type schema_description schema_public_access schema_service_description is_published published_at created_at updated_at schema_maintainer { schema_name schema_identifier information { homepage label description logo { iri } primary_site { address { contact_type email locality postal_code street telephone post_office_box_number } } } } } cp_space_aggregate(where: {_or: [{schema_description: {_ilike: $query}}, {schema_maintainer: {schema_name: {_ilike: $query}}}]}) { aggregate {   count }   } }",
  "FIND_SPACE_BY_ID": "query spaces($id: uuid!) { cp_space(where: {id: {_eq: $id}}) { id schema_image schema_color schema_audience_type schema_description schema_public_access schema_service_description is_published published_at created_at updated_at schema_maintainer { schema_name schema_identifier information { homepage label description logo { iri } primary_site { address { contact_type email locality postal_code street telephone post_office_box_number } } } } } }",
  "GET_USER_BY_IDENTITY_ID": "query getUserByIdentityId($identityId: uuid!) { users_profile(where: { identities: { id: { _eq: $identityId } } }) { id firstName: first_name lastName: last_name email: mail } }",
  "INSERT_USER": "mutation insertUser($newUser: users_profile_insert_input!) { insert_users_profile_one(object: $newUser) { id firstName: first_name lastName: last_name email: mail } }",
  "INSERT_USER_IDENTITY": "mutation insertUserIdentity($newUserIdentity: users_identity_insert_input!) { insert_users_identity_one(object: $newUserIdentity) { id } }",
  "UPDATE_USER": "mutation updateUserProfile($id: uuid!, $updateUser: users_profile_set_input!) { update_users_profile_by_pk(pk_columns: {id: $id}, _set: $updateUser) { id first_name last_name mail } }"
}