{
  "FIND_NAVIGATIONS": "query getNavElements { cms_navigation_element(distinct_on: placement, order_by: { placement: asc }) { id description placement tooltip } cms_navigation_element_aggregate(distinct_on: placement) { aggregate { count } } }",
  "FIND_NAVIGATION_BY_PLACEMENT": "query getMenuItemsByPlacement($placement: String!) { cms_navigation_element( order_by: { position: asc } where: { placement: { _eq: $placement } } ) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } cms_navigation_element_aggregate(where: { placement: { _eq: $placement } }) { aggregate { count } } }",
  "FIND_NAVIGATION_BY_ID": "query getMenuItemById($id: uuid!) { cms_navigation_element(where: { id: { _eq: $id } }) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "GET_ALL_NAVIGATION_ITEMS": "query getNavigationItems { cms_navigation_element(order_by: {placement: asc, position: asc}) { content_path content_type link_target placement position id icon_name user_group_ids label updated_at description created_at content_id tooltip } }",
  "UPDATE_NAVIGATION_BY_ID": "mutation updateMenuItemById($id: uuid!, $navigationItem: cms_navigation_element_set_input!) { update_cms_navigation_element_by_pk(pk_columns: { id: $id }, _set: $navigationItem) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "INSERT_NAVIGATION": "mutation insertMenuItem($navigationItem: cms_navigation_element_insert_input!) { insert_cms_navigation_element_one(object: $navigationItem) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "DELETE_NAVIGATION": "mutation deleteMenuItemById($id: uuid!) { delete_cms_navigation_element(where: { id: { _eq: $id } }) { affected_rows } }",
  "GET_SITE_VARIABLES_BY_NAME": "query getSiteVariableByName($name: String!) { cms_site_variables(where: {name: {_eq: $name}}) { value } }",
  "UPDATE_SITE_VARIABLE_BY_NAME": "mutation updateSiteVariableByName($name: String!, $data: cms_site_variables_set_input!) { update_cms_site_variables(where: {name: {_eq: $name}}, _set: $data) { affected_rows } }",
  "FIND_NOTIFICATIONS_BY_USER": "query getNotificationsForUser($userProfileId: uuid, $moreRecentThan: timestamptz, $offset: Int, $limit: Int) { app_notification(where: {_or: [{recipient: {_eq: $userProfileId}, created_at: {_gt: $moreRecentThan}, status: {_eq: \"READ\"}}, {recipient: {_eq: $userProfileId}, status: {_eq: \"UNREAD\"}}]}, order_by: {created_at: desc}, limit: $limit, offset: $offset) { id description title status type recipient visit_id created_at updated_at visit { cp_space_id } } app_notification_aggregate(where: {_or: [{recipient: {_eq: $userProfileId}, created_at: {_gt: $moreRecentThan}, status: {_eq: \"READ\"}}, {recipient: {_eq: $userProfileId}, status: {_eq: \"UNREAD\"}}]}) { aggregate { count } } }",
  "INSERT_NOTIFICATIONS": "mutation insertNotifications($objects: [app_notification_insert_input!]!) { insert_app_notification(objects: $objects) { returning { id description title status type recipient visit_id created_at updated_at visit { cp_space_id } } } }",
  "UPDATE_NOTIFICATION": "mutation updateNotification($notificationId: uuid, $userProfileId: uuid, $notification: app_notification_set_input) { update_app_notification(where: {id: {_eq: $notificationId}, recipient: {_eq: $userProfileId}}, _set: $notification) { returning { id description title status type recipient visit_id created_at updated_at visit { cp_space_id } } } }",
  "UPDATE_ALL_NOTIFICATION_FOR_USER": "mutation updateNotification($userProfileId: uuid, $notification: app_notification_set_input) { update_app_notification(where: {recipient: {_eq: $userProfileId}}, _set: $notification) { affected_rows } }",
  "GET_TOS_LAST_UPDATED_AT": "query getTosLastUpdatedAt { cms_site_variables_by_pk(name: \"TOS_LAST_UPDATED_AT\") { value } }",
  "GET_USER_BY_IDENTITY_ID": "query getUserByIdentityId($identityId: uuid!) { users_profile(where: { identities: { id: { _eq: $identityId } } }) { id first_name last_name mail accepted_tos_at group { permissions(order_by: { permission: { name: asc }}) { permission { name } } } identities { identity_provider_name } } }",
  "INSERT_USER": "mutation insertUser($newUser: users_profile_insert_input!) { insert_users_profile_one(object: $newUser) { id first_name last_name mail accepted_tos_at group { permissions { permission { name } } } identities { identity_provider_name } } }",
  "INSERT_USER_IDENTITY": "mutation insertUserIdentity($newUserIdentity: users_identity_insert_input!) { insert_users_identity_one(object: $newUserIdentity) { id } }",
  "UPDATE_USER": "mutation updateUserProfile($id: uuid!, $updateUser: users_profile_set_input!) { update_users_profile_by_pk(pk_columns: {id: $id}, _set: $updateUser) { id first_name last_name mail accepted_tos_at group { permissions { permission { name } } } identities { identity_provider_name } } }",
  "INSERT_VISIT": "mutation insertVisit($newVisit: cp_visit_insert_input!) { insert_cp_visit_one(object: $newVisit) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date notes(order_by: { created_at: desc }, limit: 1) { id note profile { full_name } created_at } created_at updated_at user_profile { full_name first_name last_name mail id } updater { id full_name } space { schema_maintainer { schema_name information { primary_site { address { email locality postal_code street } } } } } } }",
  "UPDATE_VISIT": "mutation updateVisit($id: uuid!, $updateVisit: cp_visit_set_input!) { update_cp_visit_by_pk(pk_columns: { id: $id}, _set: $updateVisit) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date notes(order_by: { created_at: desc }, limit: 1) { id note profile { full_name first_name last_name } created_at } created_at updated_at user_profile { full_name mail id } updater { id full_name } space { schema_maintainer { schema_name information { primary_site { address { email locality postal_code street } } } } } } }",
  "FIND_VISITS": "query visit($where: cp_visit_bool_exp, $offset: Int!, $limit: Int!, $orderBy: cp_visit_order_by! = {}) { cp_visit(where: $where, offset: $offset, limit: $limit, order_by: [$orderBy]) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date notes(order_by: {created_at: desc}, limit: 1) { id note profile { full_name } created_at } created_at updated_at user_profile { full_name first_name last_name mail id } space { schema_maintainer { schema_name information { primary_site { address { email locality postal_code street } } } } } updater { id full_name } } cp_visit_aggregate(where: $where) { aggregate { count } } }",
  "FIND_VISIT_BY_ID": "query visit($id: uuid!) { cp_visit(where: { id:{ _eq: $id } }) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date notes(order_by: { created_at: desc }, limit: 1) { id note profile { full_name } created_at } created_at updated_at user_profile { full_name first_name last_name mail id } updater { id full_name } space { schema_maintainer { schema_name information { primary_site { address { email locality postal_code street } } } } } } }",
  "FIND_ACTIVE_VISIT_BY_USER_AND_SPACE": "query findActiveVisitByUserAndSpace($userProfileId: uuid, $maintainerOrgId: String, $now: timestamp) { cp_visit(where: {user_profile_id: {_eq: $userProfileId}, status: {_eq: \"APPROVED\"}, start_date: {_lte: $now}, end_date: {_gte: $now}, space: {schema_maintainer_id: {_eq: $maintainerOrgId}}}) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date notes(order_by: {created_at: desc}, limit: 1) { id note profile { full_name } created_at } created_at updated_at user_profile { full_name mail id } updater { id full_name } space { schema_maintainer { schema_name information { primary_site { address { locality postal_code street } } } } } } }",
  "INSERT_NOTE": "mutation insertNote($visitId: uuid!, $note: String, $userProfileId: uuid) { insert_cp_visit_note_one(object: { visit_id: $visitId, note: $note, profile_id: $userProfileId }) { id } }",
  "FIND_APPROVED_STARTED_VISITS_WITHOUT_NOTIFICATION": "query getApprovedAndStartedVisitsWithoutNotification($now: timestamp) { cp_visit(where: {status: {_eq: \"APPROVED\"}, start_date: {_lt: $now}, end_date: {_gt: $now}, _not: {notifications: {type: {_eq: \"ACCESS_PERIOD_READING_ROOM_STARTED\"}}}}) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date created_at updated_at updater { id full_name } space { schema_maintainer { schema_name information {   primary_site { address {   locality   postal_code   street }   } } } } } }",
  "FIND_APPROVED_ALMOST_ENDED_VISITS_WITHOUT_NOTIFICATION": "query getApprovedAndEndedVisitsWithoutNotification($warningDate: timestamp, $now: timestamp) { cp_visit(where: {status: {_eq: \"APPROVED\"}, end_date: {_lt: $warningDate, _gt: $now}, _not: {notifications: {type: {_eq: \"ACCESS_PERIOD_READING_ROOM_END_WARNING\"}}}}) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date created_at updated_at updater { id full_name } space { schema_maintainer { schema_name information {   primary_site { address {   locality   postal_code   street }   } } } } } }",
  "FIND_APPROVED_ENDED_VISITS_WITHOUT_NOTIFICATION": "query getApprovedAndEndedVisitsWithoutNotification($now: timestamp) { cp_visit(where: {status: {_eq: \"APPROVED\"}, end_date: {_lt: $now}, _not: {notifications: {type: {_eq: \"ACCESS_PERIOD_READING_ROOM_ENDED\"}}}}) { id cp_space_id user_profile_id user_reason user_timeframe status start_date end_date created_at updated_at updater { id full_name } space { schema_maintainer { schema_name information {   primary_site { address {   locality   postal_code   street }   } } } } } }"
}