{
  "deleteContentPageLabelById": "mutation deleteContentPageLabelById($id: uuid!) { delete_app_content_label(where: { id: { _eq: $id } }) { affected_rows } }",
  "getContentPageLabelById": "query getContentPageLabelById($id: uuid!) { app_content_label(where: { id: { _eq: $id } }) { label id content_type link_to created_at updated_at } }",
  "getContentPageLabels": "query getContentPageLabels( $where: app_content_label_bool_exp! $offset: Int! $limit: Int! $orderBy: [app_content_label_order_by!]! ) { app_content_label(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { label content_type link_to created_at updated_at id } app_content_label_aggregate(where: $where) { aggregate { count } } }",
  "insertContentPageLabel": "mutation insertContentPageLabel($contentPageLabel: app_content_label_insert_input!) { insert_app_content_label(objects: [$contentPageLabel]) { returning { id } } }",
  "updateContentPageLabel": "mutation updateContentPageLabel( $contentPageLabel: app_content_label_set_input! $contentPageLabelId: uuid! ) { update_app_content_label( where: { id: { _eq: $contentPageLabelId } } _set: $contentPageLabel ) { affected_rows } }",
  "deleteContentBlock": "mutation deleteContentBlock($id: uuid!) { delete_app_content_block(where: { id: { _eq: $id } }) { affected_rows } }",
  "deleteContentLabelLinks": "mutation deleteContentLabelLinks($contentPageId: uuid!, $labelIds: [uuid!]!) { delete_app_content_page_content_label( where: { label_id: { _in: $labelIds }, content_id: { _eq: $contentPageId } } ) { affected_rows } }",
  "getContentById": "query getContentById($id: uuid!) {     app_content_page(where: {id: {_eq: $id}, is_deleted: {_eq: false}}) {         content_type         content_width         created_at         depublish_at         description         seo_description         meta_description         id         thumbnail_path         is_protected         is_public         path         user_profile_id         profile: owner_profile {             id             full_name             maintainer_users_profiles {                 maintainer {                     schema_identifier                     schema_name                     information {                         logo {                             iri                         }                     }                 }             }             group {                 id                 name                 label             }         }         publish_at         published_at         title         updated_at         user_group_ids         user_profile_id         content_content_labels {             content_label {                 label                 id                 link_to             }         }         content_blocks(order_by: {position: asc}) {             content_block_type             content_id             created_at             id             position             updated_at             variables             content_block_type         }     } }",
  "getContentLabelsByContentType": "query getContentLabelsByContentType($contentType: lookup_app_content_type_enum!) { app_content_label(where: { content_type: { _eq: $contentType } }) { id label content_type link_to } }",
  "getContentPagesByIds": "query getContentPagesByIds($ids: [uuid!]) { app_content_page(where: { id: { _in: $ids }, is_deleted: { _eq: false } }) { user_profile_id } }",
  "getContentPages": "query getContentPages($where: app_content_page_bool_exp, $offset: Int = 0, $limit: Int = 10, $orderBy: [app_content_page_order_by!] = {}) {     app_content_page(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) {         id         content_type         created_at         depublish_at         description         seo_description         meta_description         thumbnail_path         is_protected         is_public         path         user_profile_id         profile: owner_profile {             id             full_name             maintainer_users_profiles {                 maintainer {                     schema_identifier                     schema_name                     information {                         logo {                             iri                         }                     }                 }             }             group {                 id                 name                 label             }         }         publish_at         published_at         title         updated_at         user_group_ids         user_profile_id         content_content_labels {             content_label {                 id                 label                 link_to             }         }     }     app_content_page_aggregate(where: $where) {         aggregate {             count         }     } }",
  "getContentTypes": "query getContentTypes { lookup_app_content_type { value comment } }",
  "GetPermissionsFromContentPageByPath": "query GetPermissionsFromContentPageByPath($path: String!) { app_content_page(where: { path: { _eq: $path }, is_deleted: { _eq: false } }) { user_group_ids } }",
  "getPublicContentPagesByTitle": "query getPublicContentPagesByTitle( $limit: Int = 20 $orderBy: [app_content_page_order_by!] = {} $where: app_content_page_bool_exp = {} ) { app_content_page(where: $where, limit: $limit, order_by: $orderBy) { path title } }",
  "getPublicProjectContentPagesByTitle": "query getPublicProjectContentPagesByTitle( $title: String! $limit: Int = 20 $orderBy: [app_content_page_order_by!] = {} ) { app_content_page( where: { title: { _ilike: $title } content_type: { _eq: \"PROJECT\" } is_public: { _eq: true } is_deleted: { _eq: false } } limit: $limit order_by: $orderBy ) { path title } }",
  "getPublicProjectContentPages": "query getPublicProjectContentPages($limit: Int = 20, $orderBy: [app_content_page_order_by!] = {}) { app_content_page( limit: $limit order_by: $orderBy where: { content_type: { _eq: \"PROJECT\" } is_public: { _eq: true } is_deleted: { _eq: false } } ) { path title } }",
  "insertContentBlocks": "mutation insertContentBlocks($contentBlocks: [app_content_block_insert_input!]!) { insert_app_content_block(objects: $contentBlocks) { returning { id } } }",
  "insertContentLabelLinks": "mutation insertContentLabelLinks($objects: [app_content_page_content_label_insert_input!]!) { insert_app_content_page_content_label(objects: $objects) { affected_rows } }",
  "insertContent": "mutation insertContent($contentPage: app_content_page_insert_input!) { insert_app_content_page(objects: [$contentPage]) { returning { id } } }",
  "softDeleteContent": "mutation softDeleteContent($id: uuid!) { update_app_content_page(where: { id: { _eq: $id } }, _set: { is_deleted: true }) { affected_rows } }",
  "updateContentBlock": "mutation updateContentBlock($id: uuid!, $contentBlock: app_content_block_set_input!) { update_app_content_block(where: { id: { _eq: $id } }, _set: $contentBlock) { affected_rows } }",
  "updateContentById": "mutation updateContentById($id: uuid!, $contentPage: app_content_page_set_input!) { update_app_content_page( where: { id: { _eq: $id }, is_deleted: { _eq: false } } _set: $contentPage ) { affected_rows } }",
  "deleteNavigationItem": "mutation deleteNavigationItem($id: uuid!) { delete_app_navigation(where: { id: { _eq: $id } }) { affected_rows } }",
  "getNavigationElements": "query getNavigationElements { app_navigation(distinct_on: placement, order_by: { placement: asc }) { id description placement tooltip } }",
  "getNavigationItemById": "query getNavigationItemById($id: uuid!) { app_navigation(where: { id: { _eq: $id } }) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "getNavigationItemsByPlacement": "query getNavigationItemsByPlacement($placement: String!) { app_navigation( order_by: { position: asc } where: { placement: { _eq: $placement } } ) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "insertNavigationItem": "mutation insertNavigationItem($navigationItem: app_navigation_insert_input!) { insert_app_navigation(objects: [$navigationItem]) { returning { id } } }",
  "updateNavigationItemById": "mutation updateNavigationItemById($id: uuid!, $navigationItem: app_navigation_set_input!) { update_app_navigation(where: { id: { _eq: $id } }, _set: $navigationItem) { affected_rows } }",
  "getOrganizationsWithUsers": "query getOrganizationsWithUsers { maintainer_users_profile(distinct_on: maintainer_identifier) { maintainer { schema_identifier schema_name } } }",
  "getTranslations": "query getTranslations { app_config(where: { name: { _ilike: \"translations_%\" } }) { name value } }",
  "updateTranslations": "mutation updateTranslations($name: String!, $translations: app_config_set_input!) { update_app_config(where: { name: { _eq: $name } }, _set: $translations) { affected_rows } }",
  "deleteUserGroup": "mutation deleteUserGroup($userGroupId: uuid!) { delete_users_group(where: { id: { _eq: $userGroupId } }) { affected_rows } }",
  "getUserGroupById": "query getUserGroupById($id: uuid!) { users_group(where: { id: { _eq: $id } }) { label id description created_at updated_at permissions(order_by: { permission: { label: asc } }) { permission { id name label description } } } }",
  "getUserGroupsWithFilters": "query getUserGroupsWithFilters( $limit: Int! $offset: Int! $orderBy: [users_group_order_by!]! $where: users_group_bool_exp! ) { users_group(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) { label id created_at description updated_at } users_group_aggregate(where: $where) { aggregate { count } } }",
  "insertUserGroup": "mutation insertUserGroup($userGroup: users_group_insert_input!) { insert_users_group(objects: [$userGroup]) { returning { id } } }",
  "updateUserGroup": "mutation updateUserGroup($userGroup: users_group_set_input!, $userGroupId: uuid!) { update_users_group(where: { id: { _eq: $userGroupId } }, _set: $userGroup) { affected_rows } }",
  "getIdps": "query getIdps { users_identity_provider { name } }",
  "getProfileIds": "query getProfileIds($where: users_profile_bool_exp!) { users_profile(where:$where) { id } }",
  "getProfileNames": "query getProfileNames($profileIds: [uuid!]!) { users_profile(where: { id: { _in: $profileIds } }) { id full_name mail } }",
  "getUsers": "query getUsers(     $offset: Int!     $limit: Int!     $orderBy: [users_profile_order_by!]!     $where: users_profile_bool_exp! ) {     users_profile(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) {         id         full_name         first_name         last_name         mail         last_access_at         group {             label             name             id         }         identities {             identity_provider_name         }         maintainer_users_profiles {             maintainer {                 schema_identifier                 schema_name                 information {                     logo {                         iri                     }                 }             }         }     }     users_profile_aggregate(where: $where) {         aggregate {             count         }     } }"
}